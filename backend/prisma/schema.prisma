// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Lead {
  id              String   @id @default(cuid())
  fullName        String   @map("full_name")
  email           String   @unique
  company         String
  role            String
  companySector   String   @map("company_sector")
  teamSize        String   @map("team_size")
  monthlyLeads    String   @map("monthly_leads")
  budget          String
  currentChallenges String @map("current_challenges") @db.Text
  timeline        String
  gdprConsent     Boolean  @default(true) @map("gdpr_consent")
  marketingConsent Boolean @default(false) @map("marketing_consent")
  status          LeadStatus @default(NEW)
  score           Int      @default(0)
  source          String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("leads")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(USER)
  avatar      String?
  company     String?
  position    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  boards      Board[]
  boardMembers BoardMember[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  color       String   @default("bg-blue-500")
  isPublic    Boolean  @default(false) @map("is_public")
  isFavorite  Boolean  @default(false) @map("is_favorite")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userId      String?  @map("user_id")
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]
  members     BoardMember[]

  @@map("boards")
}

model Column {
  id          String   @id @default(cuid())
  title       String
  color       String   @default("bg-gray-500")
  position    Int      @default(0)
  isExpanded  Boolean  @default(true) @map("is_expanded")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  boardId     String   @map("board_id")
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks       Task[]
  subColumns  SubColumn[]

  @@map("columns")
}

model SubColumn {
  id          String   @id @default(cuid())
  title       String
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  columnId    String   @map("column_id")
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("sub_columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  priority    TaskPriority @default(MEDIUM)
  assignee    String?
  dueDate     DateTime? @map("due_date")
  tags        Json     @default("[]")
  completed   Boolean  @default(false)
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  columnId    String   @map("column_id")
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  subColumnId String?  @map("sub_column_id")
  subColumn   SubColumn? @relation(fields: [subColumnId], references: [id], onDelete: Cascade)

  checklist   ChecklistItem[]

  @@map("tasks")
}

model ChecklistItem {
  id          String   @id @default(cuid())
  text        String
  completed   Boolean  @default(false)
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  taskId      String   @map("task_id")
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model BoardMember {
  id          String   @id @default(cuid())
  email       String
  name        String
  permission  MemberPermission @default(VIEW)
  invitedAt   DateTime @default(now()) @map("invited_at")

  // Relations
  boardId     String   @map("board_id")
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId      String?  @map("user_id")
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([boardId, email])
  @@map("board_members")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  type        String
  status      CampaignStatus @default(DRAFT)
  budget      Decimal
  spent       Decimal  @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  startDate   DateTime @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("campaigns")
}

model Analytics {
  id        String   @id @default(cuid())
  metric    String
  value     Decimal
  date      DateTime
  category  String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("analytics")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String? @db.Text
  type        String
  data        Json
  generatedBy String   @map("generated_by")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("reports")
}

// CRM Models
model Pipeline {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        PipelineType @default(SALES)
  color       String       @default("#3b82f6")
  isDefault   Boolean      @default(false) @map("is_default")
  allowPromotion Boolean   @default(false) @map("allow_promotion")
  position    Int          @default(0)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  stages      PipelineStage[]
  deals       Deal[]

  @@map("pipelines")
}

model PipelineStage {
  id          String   @id @default(cuid())
  title       String
  color       String   @default("#6366f1")
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  pipelineId  String   @map("pipeline_id")
  pipeline    Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  deals       Deal[]

  @@map("pipeline_stages")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  sector      String?
  size        String?
  website     String?
  phone       String?
  address     String?  @db.Text
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  contacts    Contact[]
  deals       Deal[]

  @@map("companies")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String?
  phone       String?
  position    String?
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  companyId   String?  @map("company_id")
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  deals       Deal[]
  activities  Activity[]

  @@map("contacts")
}

model Deal {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text

  // Sales fields
  value         Decimal      @default(0) @db.Decimal(10, 2)
  currency      String       @default("BRL")
  probability   Int          @default(0)
  expectedCloseDate DateTime? @map("expected_close_date")
  closedDate    DateTime?    @map("closed_date")
  lostReason    String?      @map("lost_reason") @db.Text

  // Game-related fields
  painDiscovered   String?   @map("pain_discovered") @db.Text
  painIntensity    Int?      @map("pain_intensity")
  painCategory     String?   @map("pain_category") @db.VarChar(50)
  orionSolution    String?   @map("orion_solution") @db.Text
  gameLeadLevel    Int?      @default(1) @map("game_lead_level")

  // Market Research fields
  researchType          ResearchType @default(SALES) @map("research_type")
  targetProfile         String?      @map("target_profile") @db.VarChar(50)
  marketSegment         String?      @map("market_segment") @db.VarChar(100)
  companySizeTarget     String?      @map("company_size_target") @db.VarChar(50)
  budgetRangeMin        Decimal?     @map("budget_range_min") @db.Decimal(10, 2)
  budgetRangeMax        Decimal?     @map("budget_range_max") @db.Decimal(10, 2)
  decisionMakerIdentified Boolean   @default(false) @map("decision_maker_identified")
  decisionMakerName     String?      @map("decision_maker_name") @db.VarChar(200)
  decisionMakerRole     String?      @map("decision_maker_role") @db.VarChar(100)
  qualificationScore    Int          @default(0) @map("qualification_score")
  researchNotes         String?      @map("research_notes") @db.Text
  painPointsList        Json         @default("[]") @map("pain_points_list")

  // Promotion tracking
  promotedToSales       Boolean      @default(false) @map("promoted_to_sales")
  promotedFromDealId    String?      @map("promoted_from_deal_id")

  // Meta
  position      Int          @default(0)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  pipelineId    String         @map("pipeline_id")
  pipeline      Pipeline       @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  stageId       String         @map("stage_id")
  stage         PipelineStage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  companyId     String?        @map("company_id")
  company       Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)
  contactId     String?        @map("contact_id")
  contact       Contact?       @relation(fields: [contactId], references: [id], onDelete: SetNull)
  activities    Activity[]

  @@map("deals")
}

model Activity {
  id          String        @id @default(cuid())
  type        ActivityType
  subject     String
  description String?       @db.Text
  dueDate     DateTime?     @map("due_date")
  completed   Boolean       @default(false)

  // Market Research fields
  researchFindings      String?  @map("research_findings") @db.Text
  painPointsDiscovered  Json     @default("[]") @map("pain_points_discovered")
  qualificationImpact   Int      @default(0) @map("qualification_impact")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  dealId      String?       @map("deal_id")
  deal        Deal?         @relation(fields: [dealId], references: [id], onDelete: Cascade)
  contactId   String?       @map("contact_id")
  contact     Contact?      @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// ============= GAME MODELS =============

model GameState {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")

  // Resources
  coins       Int      @default(0)
  gems        Int      @default(0)
  energy      Int      @default(50)
  maxEnergy   Int      @default(50) @map("max_energy")
  reputation  Int      @default(0)

  // Progression
  level       Int      @default(1)
  experience  Int      @default(0)
  experienceToNextLevel Int @default(100) @map("experience_to_next_level")

  // Stats
  intelligence Int     @default(5)
  charisma    Int      @default(5)
  perception  Int      @default(5)
  knowledge   Int      @default(5)
  luck        Int      @default(5)
  skillPoints Int      @default(0) @map("skill_points")

  // Unlocks
  unlockedTerritories Json @default("[]") @map("unlocked_territories")
  unlockedPartySlots  Int  @default(1) @map("unlocked_party_slots")

  // Meta
  lastEnergyRegen DateTime @default(now()) @map("last_energy_regen")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("game_states")
}

model GameInventory {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  itemId      String   @map("item_id") @db.VarChar(100)
  quantity    Int      @default(1)
  isEquipped  Boolean  @default(false) @map("is_equipped")
  slot        String?  @db.VarChar(50) // 'primary_tool', 'secondary_tool', etc
  acquiredAt  DateTime @default(now()) @map("acquired_at")

  @@map("game_inventory")
  @@index([userId])
}

model GameParty {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  npcId       String   @map("npc_id") @db.VarChar(100)
  level       Int      @default(1)
  recruitedAt DateTime @default(now()) @map("recruited_at")

  @@map("game_party")
  @@index([userId])
}

model GameQuest {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  questId     String   @map("quest_id") @db.VarChar(100)
  status      String   @default("active") @db.VarChar(20) // 'active', 'completed', 'failed'
  progress    Json     @default("{}")
  startedAt   DateTime @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")

  @@map("game_quests")
  @@index([userId])
  @@index([questId])
}

model GameAchievement {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  achievementId String   @map("achievement_id") @db.VarChar(100)
  unlockedAt    DateTime @default(now()) @map("unlocked_at")

  @@unique([userId, achievementId])
  @@map("game_achievements")
  @@index([userId])
}

model GameInsight {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  painText        String   @map("pain_text") @db.Text
  painCategory    String?  @map("pain_category") @db.VarChar(50)
  painIntensity   Int      @map("pain_intensity")
  orionSolution   String?  @map("orion_solution") @db.Text
  occurrences     Int      @default(1) // quantas empresas têm essa dor
  dealIds         Json     @default("[]") @map("deal_ids") // refs aos deals
  discoveredAt    DateTime @default(now()) @map("discovered_at")

  @@map("game_insights")
  @@index([userId])
  @@index([painCategory])
}

model GameTransaction {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")

  // CRM Reference
  crmAction         String?  @map("crm_action") @db.VarChar(100)
  crmReferenceId    String?  @map("crm_reference_id")

  // Rewards
  coinsEarned       Int      @default(0) @map("coins_earned")
  gemsEarned        Int      @default(0) @map("gems_earned")
  energyEarned      Int      @default(0) @map("energy_earned")
  experienceEarned  Int      @default(0) @map("experience_earned")
  reputationEarned  Int      @default(0) @map("reputation_earned")

  // Item drops
  itemDrops         Json?    @map("item_drops")

  createdAt         DateTime @default(now()) @map("created_at")

  @@map("game_transactions")
  @@index([userId])
  @@index([crmAction])
}

model GameLeadRelationship {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  contactId           String   @map("contact_id")

  relationshipLevel   Int      @default(0) @map("relationship_level")
  lastInteraction     DateTime @default(now()) @map("last_interaction")

  // Histórico
  interviewsCount     Int      @default(0) @map("interviews_count")
  interviewsSuccessful Int     @default(0) @map("interviews_successful")
  referralsGiven      Int      @default(0) @map("referrals_given")

  @@unique([userId, contactId])
  @@map("game_lead_relationships")
  @@index([userId])
  @@index([contactId])
}

model GameTerritoryProgress {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  territoryId        String   @map("territory_id") @db.VarChar(50)

  explorationPercent Int      @default(0) @map("exploration_percent")
  leadsFound         Int      @default(0) @map("leads_found")
  leadsInterviewed   Int      @default(0) @map("leads_interviewed")
  painsDiscovered    Int      @default(0) @map("pains_discovered")
  bossDefeated       Boolean  @default(false) @map("boss_defeated")

  @@unique([userId, territoryId])
  @@map("game_territory_progress")
  @@index([userId])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  DEMO_SCHEDULED
  PROPOSAL_SENT
  CLOSED_WON
  CLOSED_LOST
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  TASK
  INTERVIEW
  SURVEY
}

enum PipelineType {
  MARKET_RESEARCH
  SALES
}

enum ResearchType {
  MARKET_RESEARCH
  SALES
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum MemberPermission {
  VIEW
  EDIT
}
