// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Lead {
  id              String   @id @default(cuid())
  fullName        String   @map("full_name")
  email           String   @unique
  company         String
  role            String
  companySector   String   @map("company_sector")
  teamSize        String   @map("team_size")
  monthlyLeads    String   @map("monthly_leads")
  budget          String
  currentChallenges String @map("current_challenges") @db.Text
  timeline        String
  gdprConsent     Boolean  @default(true) @map("gdpr_consent")
  marketingConsent Boolean @default(false) @map("marketing_consent")
  status          LeadStatus @default(NEW)
  score           Int      @default(0)
  source          String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("leads")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(USER)
  avatar      String?
  company     String?
  position    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  boards      Board[]
  boardMembers BoardMember[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  color       String   @default("bg-blue-500")
  isPublic    Boolean  @default(false) @map("is_public")
  isFavorite  Boolean  @default(false) @map("is_favorite")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userId      String?  @map("user_id")
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]
  members     BoardMember[]

  @@map("boards")
}

model Column {
  id          String   @id @default(cuid())
  title       String
  color       String   @default("bg-gray-500")
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  boardId     String   @map("board_id")
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  priority    TaskPriority @default(MEDIUM)
  assignee    String?
  dueDate     DateTime? @map("due_date")
  tags        Json     @default("[]")
  completed   Boolean  @default(false)
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  columnId    String   @map("column_id")
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  checklist   ChecklistItem[]

  @@map("tasks")
}

model ChecklistItem {
  id          String   @id @default(cuid())
  text        String
  completed   Boolean  @default(false)
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  taskId      String   @map("task_id")
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model BoardMember {
  id          String   @id @default(cuid())
  email       String
  name        String
  permission  MemberPermission @default(VIEW)
  invitedAt   DateTime @default(now()) @map("invited_at")

  // Relations
  boardId     String   @map("board_id")
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId      String?  @map("user_id")
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([boardId, email])
  @@map("board_members")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  type        String
  status      CampaignStatus @default(DRAFT)
  budget      Decimal
  spent       Decimal  @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  startDate   DateTime @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("campaigns")
}

model Analytics {
  id        String   @id @default(cuid())
  metric    String
  value     Decimal
  date      DateTime
  category  String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("analytics")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String? @db.Text
  type        String
  data        Json
  generatedBy String   @map("generated_by")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("reports")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  DEMO_SCHEDULED
  PROPOSAL_SENT
  CLOSED_WON
  CLOSED_LOST
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum MemberPermission {
  VIEW
  EDIT
}
