# Dockerfile using alternative registries (no Docker Hub dependency)
# This solves the 401 Unauthorized issue from registry-1.docker.io

# Try alternative registries that might be accessible
FROM ghcr.io/distroless/nodejs18-debian11:latest AS base-distroless

# Alternative: Use Debian base with manual Node.js installation
FROM debian:bullseye-slim AS base

# Install Node.js without Docker Hub dependency
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    gnupg \
    lsb-release \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x bullseye main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && npm config set fund false \
    && npm config set audit-level high

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install ALL dependencies (including devDependencies for building)
COPY package.json package-lock.json* ./
RUN npm install --ignore-scripts \
    --network-timeout 600000 \
    --fetch-timeout 600000 \
    --fetch-retries 5 \
    --registry https://registry.npmjs.org/ \
    --no-optional

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma Client first
RUN npx prisma generate

# Build the application
RUN npm run build

# Production dependencies only
FROM base AS prod-deps
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm install --omit=dev --ignore-scripts \
    --network-timeout 600000 \
    --fetch-timeout 600000 \
    --fetch-retries 5 \
    --registry https://registry.npmjs.org/ \
    --no-optional

# Production image, copy all the files and run the app
FROM base AS runner
WORKDIR /app

# Build arguments for database connection
ARG DATABASE_URL
ARG DB_HOST
ARG DB_USER
ARG DB_PASSWORD
ARG DB_NAME
ARG DB_PORT

ENV NODE_ENV=production
ENV DATABASE_URL=$DATABASE_URL

# Create a non-privileged user that the app will run under.
RUN groupadd --system --gid 1001 nodejs || true
RUN useradd --system --uid 1001 --gid 1001 nodejs || true

# Copy the built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=prod-deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma
COPY --chown=nodejs:nodejs package.json ./
COPY --chown=nodejs:nodejs start.sh ./

# Generate Prisma Client only (db push will run at runtime)
RUN npx prisma generate

# Make start script executable
RUN chmod +x start.sh

USER nodejs

# Expose the port that the application listens on.
EXPOSE 5000

# Set the PORT environment variable
ENV PORT=5000

# Run the application with database setup
CMD ["./start.sh"]